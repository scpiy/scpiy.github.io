I"~=<h2 id="flask-mail以及sendmail的简单使用">flask-mail以及sendmail的简单使用</h2>

<p>关于如何在ubuntu的终端中发送邮件以及如何在flask中使用flask-mail发送邮件。</p>

<p>这里是<a href="https://github.com/luhuisicnu/The-Flask-Mega-Tutorial-zh"><strong>The-Flask-Mega-Tutorial-zh</strong></a>的第七章，开始让web app使用邮件服务发送错误，之后也会用到邮件服务，至于是干什么，忘了。。。</p>

<p><strong>flask发送邮件是不用sendmail的，我刚开始不知道，折腾了好一会，虽然现在知道不用了，但我还是记下来吧，说不定恰好有人会有需要？<del>总不能让我的时间白白浪费了吧。。。</del>，以后说不定我也还会用到，姑且先记着。但是如果你对这个没兴趣，可以直接跳过。看旁边的小标题哦。</strong></p>

<p>首先让我发发牢骚，我跟着国人的教程走了好几个流程，改过来改过去，也发送不了，然后看英文结果第一个不到10分钟的时间就弄好了。不过也有可能是我太笨。</p>

<p>首先按照<a href="https://gist.github.com/adamstac/7462202">Install and configure Sendmail on Ubuntu</a>这里的方法，安装并配置你的sendmail。我自己觉得应该不会看不懂吧？就不翻译了。</p>

<ol>
  <li>If sendmail isn’t installed, install it: <code class="highlighter-rouge">sudo apt-get install sendmail</code></li>
  <li>Configure <code class="highlighter-rouge">/etc/hosts</code> file: <code class="highlighter-rouge">nano /etc/hosts</code></li>
  <li>Make sure the line looks like this: <code class="highlighter-rouge">127.0.0.1 localhost yourhostname</code></li>
  <li>Run Sendmail’s config and answer ‘Y’ to everything: <code class="highlighter-rouge">sudo sendmailconfig</code></li>
  <li>Restart apache <code class="highlighter-rouge">sudo service apache2 restart</code></li>
</ol>

<p>然后，如果一切顺利，在你的终端里：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sendmail youraddress@example.com               
Subject: Test Send Mail
Hello mail。
# ctrl + d结束正文部分，稍等不到一分钟，你就可以收到邮件了，不过应该是在垃圾邮件里。
</code></pre></div></div>

<p><code class="highlighter-rouge">sendmail</code>是一个命令，之后跟的是你的邮箱地址，qq邮箱啊，163邮箱啊，gmail啊，应该都可以的(因为我只用网易邮箱做了测试，但至少网易邮箱是可行的。)有图有真相。</p>

<p><a href="https://imgchr.com/i/n1y1j1"><img src="https://s2.ax1x.com/2019/09/07/n1y1j1.md.png" alt="n1y1j1.md.png" /></a></p>

<p>虽然是垃圾邮件就是了，但至少发送成功了。</p>

<p>sendmail的比较常用的用法可以看这里<a href="https://help.dreamhost.com/hc/en-us/articles/216687518-How-do-I-use-Sendmail-">How do I use Sendmail?</a>，上面那个例子也出于这里，我把文章大概看了看，它提供的功能我都还用不到诶，好像是密抄和什么其他的，中文我都不知道是什么的东西，暂时也没兴趣知道，还有在shell script中使用sendmail，很诱人，可是我还不会shell编程。。暂时跳过。</p>

<hr />

<h4 id="在flask-app里使用邮件服务">在flask app里使用邮件服务。</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 我需要知道网易邮箱是使用SSL还是TSL
</code></pre></div></div>

<p>比较尴尬的是，logging.handlers.SMTPHandler似乎只支持TSL。。</p>

<p><del>其实是因为我看不懂教程里面说的是什么东西什么的我才不会说出来呢！</del></p>

<p>总之，我选择使用flask-mail插件+163网易邮箱来发送错误信息。qq邮箱与国内其他邮箱应该类似，至少qq邮箱和163邮箱应该都是使用SSL连接的，至于其他的按实际情况为准，这里我以网易邮箱为例。</p>

<p>首先进行flask-mail的初始化，在<code class="highlighter-rouge">__init__.py</code>文件里</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
<span class="kn">from</span> <span class="nn">flask_mail</span> <span class="kn">import</span> <span class="n">Mail</span>

<span class="o">...</span>
<span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
<span class="n">mail</span> <span class="o">=</span> <span class="n">Mail</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>
</code></pre></div></div>

<p>然后是配置，我跟着教程走的，配置放在一个单独的文件<code class="highlighter-rouge">config.py</code>里。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">MAIL_SERVER</span> <span class="o">=</span> <span class="s">'smtp.163.com'</span>
<span class="n">MAIL_PORT</span> <span class="o">=</span> <span class="mi">465</span>
<span class="c1"># 划重点，选对，不知道自己是哪个的上网查查
</span><span class="n">MAIL_USE_TLS</span> <span class="o">=</span> <span class="bp">False</span>
<span class="n">MAIL_USE_SSL</span> <span class="o">=</span> <span class="bp">True</span>
<span class="c1"># 划重点，这个密码。并不是登录密码，而是认证码，如果你不清楚，后面会说
</span><span class="n">MAIL_PASSWORD</span> <span class="o">=</span> <span class="s">'**********'</span>
<span class="n">MAIL_USERNAME</span> <span class="o">=</span> <span class="s">'********@163.com'</span>
</code></pre></div></div>

<p><a href="https://imgchr.com/i/n3MdFU"><img src="https://s2.ax1x.com/2019/09/08/n3MdFU.md.png" alt="n3MdFU.md.png" /></a></p>

<p>当你第一次来到这个页面，选择开启SMTP服务时，会提醒你需要设置”认证码”，自行设置好以后，上面的password就是这个认证码，而非你的登录密码，在这个页面你也能看到你使用的邮件的”server”，以及你是SSL连接。</p>

<p>具体的配置、初始化、或者如果你想更深入了解flask-mail，建议看看<a href="http://www.pythondoc.com/flask-mail/">flask-mail中文文档</a>，虽说是中文，但其实翻译的并不全，但是对一般人应该够用。</p>

<p>然后就是在你的web app里实现发送邮件的服务(这个也可以参考上面的文档链接)。</p>

<p>我的错误处理函数集中在<code class="highlighter-rouge">app/errors.py</code>这个文件里。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">render_template</span>
<span class="c1"># 这个db不用管，这个源码也只是看个思路就好，有不明白的地方也没什么
</span><span class="kn">from</span> <span class="nn">app</span> <span class="kn">import</span> <span class="n">app</span><span class="p">,</span> <span class="n">db</span><span class="p">,</span> <span class="n">mail</span>
<span class="kn">from</span> <span class="nn">flask_mail</span> <span class="kn">import</span> <span class="n">Message</span>


<span class="k">def</span> <span class="nf">send_error_message</span><span class="p">(</span><span class="n">error_message</span><span class="p">):</span>
    <span class="c1"># send error message
</span>    <span class="k">if</span> <span class="ow">not</span> <span class="n">app</span><span class="o">.</span><span class="n">debug</span><span class="p">:</span>
        <span class="c1"># 因为我在配置里设置了MAIL_DEFAULT_SENDER，所以没有填写发件人。
</span>        <span class="n">msg</span> <span class="o">=</span> <span class="n">Message</span><span class="p">(</span><span class="n">error_message</span><span class="p">,</span> <span class="n">recipients</span><span class="o">=</span><span class="p">[</span><span class="s">'h1273396866@163.com'</span><span class="p">])</span>
        <span class="n">msg</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">error_message</span>
        <span class="n">msg</span><span class="o">.</span><span class="n">html</span> <span class="o">=</span> <span class="n">f</span><span class="s">"&lt;b&gt;{error_message}&lt;/b&gt;"</span>
        <span class="n">mail</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>



<span class="o">@</span><span class="n">app</span><span class="o">.</span><span class="n">errorhandler</span><span class="p">(</span><span class="mi">404</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">not_found_error</span><span class="p">(</span><span class="n">error</span><span class="p">):</span>
    <span class="n">send_error_message</span><span class="p">(</span><span class="s">'404 error occur'</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">'404.html'</span><span class="p">),</span> <span class="mi">404</span>


<span class="o">@</span><span class="n">app</span><span class="o">.</span><span class="n">errorhandler</span><span class="p">(</span><span class="mi">500</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">internal_error</span><span class="p">(</span><span class="n">error</span><span class="p">):</span>
    <span class="n">send_error_message</span><span class="p">(</span><span class="s">'500 error occur'</span><span class="p">)</span>
    <span class="n">db</span><span class="o">.</span><span class="n">session</span><span class="o">.</span><span class="n">rollback</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">render_template</span><span class="p">(</span><span class="s">'500.html'</span><span class="p">),</span> <span class="mi">500</span>

</code></pre></div></div>

<p>上面就是我的源码，很<del>简陋</del>但很<strong>实用</strong>哦。</p>

<p>简单来说就是定义一个接受错误信息的函数<code class="highlighter-rouge">send_error_message</code>，当调用错误处理函数时获得错误信息并使用获得的错误信息调用<code class="highlighter-rouge">send_error_message</code>，先发送邮件，再进行其他的错误处理，当然也可以先进行其他的错误处理，在发送邮件，效果大概一样。</p>

<p>flask-mail发送邮件真的很简单，<a href="http://www.pythondoc.com/flask-mail/">flask-mail中文文档</a>这里面说的很清楚很明白也很简单，我就直接复制粘贴吧，免得有的人不想在几个页面之间跳来跳去。</p>

<blockquote>
  <h2 id="配置-flask-mail">配置 Flask-Mail</h2>

  <p><strong>Flask-Mail</strong> 使用标准的 Flask 配置 API 进行配置。下面这些是可用的配置型(每一个将会在文档中进行解释):</p>

  <ul>
    <li><strong>MAIL_SERVER</strong> : 默认为 <strong>‘localhost’</strong></li>
    <li><strong>MAIL_PORT</strong> : 默认为 <strong>25</strong></li>
    <li><strong>MAIL_USE_TLS</strong> : 默认为 <strong>False</strong></li>
    <li><strong>MAIL_USE_SSL</strong> : 默认为 <strong>False</strong></li>
    <li><strong>MAIL_DEBUG</strong> : 默认为 <strong>app.debug</strong></li>
    <li><strong>MAIL_USERNAME</strong> : 默认为 <strong>None</strong></li>
    <li><strong>MAIL_PASSWORD</strong> : 默认为 <strong>None</strong></li>
    <li><strong>MAIL_DEFAULT_SENDER</strong> : 默认为 <strong>None</strong></li>
    <li><strong>MAIL_MAX_EMAILS</strong> : 默认为 <strong>None</strong></li>
    <li><strong>MAIL_SUPPRESS_SEND</strong> : 默认为 <strong>app.testing</strong></li>
    <li><strong>MAIL_ASCII_ATTACHMENTS</strong> : 默认为 <strong>False</strong></li>
  </ul>

  <p>另外，<strong>Flask-Mail</strong> 使用标准的 Flask 的 <code class="highlighter-rouge">TESTING</code> 配置项用于单元测试(下面会具体介绍)。</p>

  <p>邮件是通过一个 <code class="highlighter-rouge">Mail</code> 实例进行管理:</p>

  <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from flask import Flask
from flask_mail import Mail

app = Flask(__name__)
mail = Mail(app)
</code></pre></div>  </div>

  <p>在这个例子中所有的邮件将会使用传入到 <code class="highlighter-rouge">Mail</code> 实例中的应用程序的配置项进行发送。</p>

  <p>或者你也可以在应用程序配置的时候设置你的 <code class="highlighter-rouge">Mail</code> 实例，通过使用 <strong>init_app</strong> 方法:</p>

  <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mail = Mail()

app = Flask(__name__)
mail.init_app(app)
</code></pre></div>  </div>

  <p>在这个例子中邮件将会使用 Flask 的 <code class="highlighter-rouge">current_app</code> 中的配置项进行发送。如果你有多个具有不用配置项的多个应用运行在同一程序的时候，这种设置方式是十分有用的，</p>

  <h2 id="发送邮件">发送邮件</h2>

  <p>为了能够发送邮件，首先需要创建一个 <code class="highlighter-rouge">Message</code> 实例:</p>

  <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from flask_mail import Message

@app.route("/")
def index():

    msg = Message("Hello",
                  sender="from@example.com",
                  recipients=["to@example.com"])
</code></pre></div>  </div>

  <p>你能够设置一个或者多个收件人:</p>

  <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>msg.recipients = ["you@example.com"]
msg.add_recipient("somebodyelse@example.com")
</code></pre></div>  </div>

  <p>如果你设置了 <code class="highlighter-rouge">MAIL_DEFAULT_SENDER</code>，就不必再次填写发件人，默认情况下将会使用配置项的发件人:</p>

  <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>msg = Message("Hello",
              recipients=["to@example.com"])
</code></pre></div>  </div>

  <p>如果 <code class="highlighter-rouge">sender</code> 是一个二元组，它将会被分成姓名和邮件地址:</p>

  <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>msg = Message("Hello",
              sender=("Me", "me@example.com"))

assert msg.sender == "Me &lt;me@example.com&gt;"
</code></pre></div>  </div>

  <p>邮件内容可以包含主体以及/或者 HTML:</p>

  <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>msg.body = "testing"
msg.html = "&lt;b&gt;testing&lt;/b&gt;"
</code></pre></div>  </div>

  <p>最后，发送邮件的时候请使用 Flask 应用设置的 <code class="highlighter-rouge">Mail</code> 实例:</p>

  <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mail</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
</code></pre></div>  </div>
</blockquote>

<p>如果顺利，就运行下自己的app，然后触发一个500或者404错误，去看看是否收到了邮件？反正我是收到了诶。</p>

<hr />

<p>那么今天就到这里了，感谢你的观看。</p>

<p>如果有什么不明白的地方欢迎与我联系。</p>
:ET