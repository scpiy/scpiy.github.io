I"<h2 id="python中的import与循环import">python中的import与循环import</h2>

<p>这段时间一直在看一个flask的教程，老师时不时在教程上提到”<strong>该导入位于底部以避免循环依赖</strong>“，一直以来不明白是什么意思，今天又一次看到这句话终于忍不住了，就去网上查了查相关的东西，现在脑袋里清晰了很多，做一下笔记，同时希望对你也能有所帮助。</p>

<blockquote>
  <p>我看的是<a href="http://effbot.org/zone/import-confusion.htm#import-gothas">Importing Python Modules</a>这篇文章，所以这篇博客其实也可以算是那篇博客的翻译与总结，那篇博客写于1999年，最后一次修改似乎是在2001年，并且还是用英文写的，所以如果我写的有什么错误的地方，希望你可以指出，<del>我也看了些在CSDN上的博文，应该不会有错误的才对吧……大概</del></p>
</blockquote>

<h4 id="当你import一个模块的时候发生了什么">当你import一个模块的时候，发生了什么</h4>

<p>要想知道为什么“该导入位于底部以避免循环依赖”，首先要知道“What Does Python Do to Import a Module”，那篇博客的原文写的很详细，分了四个步骤</p>

<ol>
  <li>创建了一个新的，空的模块对象(本质上是一个字典)</li>
  <li>把创建好的模块对象插入到”<em>sys.modules</em> dictionary“</li>
  <li>在创建好的模块中加载代码，也就是复制粘贴被import的模块的代码到第一步创建的模块中(如果有必要，先编译，<del>大概是调用其它静态语言的模块吧，不清楚，但反正人家是这么说的</del>)</li>
  <li>把模块中的代码在一个新的模块命名空间中运行一遍，在代码中定义的所有的对象都可以在这个模块对象中获得</li>
</ol>

<p>其实简单来说的话，就是在你导入(import)一个模块的时候，这个模块的代码都会被执行一次，<del>只要知道这个应该就够用了，对新手来说，至少对今天我要说的东西来说是这样。</del></p>

<h4 id="循环import">循环import</h4>

<p>首先假设存在这么两个文件<strong>X.py</strong>与<strong>Y.py</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># module X
</span><span class="kn">import</span> <span class="nn">Y</span>

<span class="k">def</span> <span class="nf">spam</span><span class="p">():</span>
    <span class="k">print</span> <span class="s">"function in module x"</span>

<span class="k">def</span> <span class="nf">test</span><span class="p">():</span>
	<span class="n">Y</span><span class="p">.</span><span class="n">Y_spam</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># model Y
</span><span class="kn">from</span> <span class="nn">X</span> <span class="kn">import</span> <span class="n">spam</span> <span class="c1">#这个spam是没有定义的，是不能用的
</span>
<span class="k">def</span> <span class="nf">Y_spam</span><span class="p">():</span>
	<span class="k">print</span><span class="p">(</span><span class="n">span</span><span class="p">())</span>	
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># mian.py
</span><span class="kn">import</span> <span class="nn">X</span>

<span class="n">X</span><span class="p">.</span><span class="n">test</span><span class="p">()</span>
<span class="c1">#ImportError: cannot import name 'spam' from 'X'
</span></code></pre></div></div>

<p>解释一下，</p>

<ol>
  <li>在main.py中import X</li>
  <li>程序会停下来并且开始执行X中的代码</li>
  <li>程序在X中执行到了import Y</li>
  <li>程序又停下来并且开始执行Y中的代码</li>
  <li>执行到from X import spam这行代码</li>
  <li><strong>spam在X中还没有定义，引发错误</strong></li>
</ol>

<p><del>看起来很简单的样子。</del></p>

<h4 id="循环import的解决方法">循环import的解决方法</h4>

<p>那篇博文的作者提出的两种方法</p>

<ol>
  <li>改善组织结构，避免循环import，看起来似乎是废话，但真的很重要，这么做有太多好处了。</li>
  <li>把导致循环import发生的import语句放到文件的末尾，这样就可以在循环import发生的时候确保模块中的函数、类、总而言之，所有东西都已经被定义并且可用，这也就是我在学的课程的老师说的那句话的意思。</li>
</ol>

<p>最后说一下，我参考的那篇博客虽然相当地有年头了，但是写的很好，里面也提到了很多我没有说的东西，有兴趣的可以去看一下。</p>
:ET